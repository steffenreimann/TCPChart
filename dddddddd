  readStream.on('data', function (data) {
        const isReady = Wstream.write(data);
        if (!isReady) {
            //wird der Inputstream gestoppt
            readStream.pause();
            //ist der resultstream wieder aufnahmefÃ¤hig 
            Wstream.once('drain', function () {
                //wird der inputstream gestartet
                readStream.resume();
            });
        }
    });
    readStream.on('end', function () {
        Wstream.end();
        console.log("Server // File end upload");
        return true
    });
    readStream.on('error', function (data) {
        console.log('-- ERROR -- server');
        console.log(data);
        return false
    })














    fs.readdir(directoryPath, function (err, files) {
        //handling error
        if (err) {
            return console.log('Unable to scan directory: ' + err);
        }
        logindex = files.length
        console.log('files lenght = ' + files.length)

        logindex++
        console.log('logindex = ' + logindex)
        fs.writeFile("logs/log-" + logindex + ".json", JSON.stringify(WEBlog), (err) => {
            logindex = 0
            if (err) console.log(err);
            console.log("Successfully Written to File.");
        });
        WEBlog = [];
    });











var ControlData_log = false;
var ConfigData_log = false;

    if (data.category == 'debug') {
        //Die Daten werden hier weiter an die socket.io clients verteilt.
        io.sockets.emit('onDebugData', data);
        if (DebugData_log && !AllData_log) {
            work(data);
        }
    } else if (data.category == 'control') {
        io.sockets.emit('onControlData', data);
        if (ControlData_log && !AllData_log) {
            work(data);
        }
    } else if (data.category == 'config') {
        io.sockets.emit('onConfigData', data);
        if (ConfigData_log && !AllData_log) {
            work(data);
        }
    }


















    var WEBcache = { current_position: '', dac_power: '', direction: '', enabled_motors: { steering: false, drive: false }, target_position: '', time: '' }
var WEBlog = [];
var log_lenght = 200
function work(data) {
    var len = WEBlog.length
    WEBcache = data
    WEBlog.push(WEBcache);
    if (len > log_lenght) {
        //console.log(len);
        for (var i = len - log_lenght; i > 0; i--) {
            WEBlog.pop();
        }
    }
    // console.log(WEBcache);
}